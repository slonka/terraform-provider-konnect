// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequest struct {
	// Id of the Konnect resource
	CpID string `pathParam:"style=simple,explode=false,name=cpId"`
	// Name of the mesh (e.g., default, secondary)
	MeshName string `pathParam:"style=simple,explode=false,name=meshName"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequest) GetCpID() string {
	if o == nil {
		return ""
	}
	return o.CpID
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequest) GetMeshName() string {
	if o == nil {
		return ""
	}
	return o.MeshName
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequirements - Rules defines a set of rules for data plane proxies to be member of the mesh.
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequirements struct {
	// Tags defines set of required tags. You can specify '*' in value to require non empty value of tag
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequirements) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRestrictions - Rules defines a set of rules for data plane proxies to be member of the mesh.
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRestrictions struct {
	// Tags defines set of required tags. You can specify '*' in value to require non empty value of tag
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRestrictions) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy - DataplaneProxyMembership defines a set of requirements for data plane proxies to be a member of the mesh.
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy struct {
	// Requirements defines a set of requirements that data plane proxies must fulfill in order to join the mesh.
	Requirements []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequirements `json:"requirements,omitempty"`
	// Restrictions defines a set of restrictions that data plane proxies cannot fulfill in order to join the mesh.
	Restrictions []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRestrictions `json:"restrictions,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy) GetRequirements() []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRequirements {
	if o == nil {
		return nil
	}
	return o.Requirements
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy) GetRestrictions() []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRestrictions {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConstraints - Constraints that applies to the mesh and its entities
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConstraints struct {
	// DataplaneProxyMembership defines a set of requirements for data plane proxies to be a member of the mesh.
	DataplaneProxy *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy `json:"dataplaneProxy,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConstraints) GetDataplaneProxy() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDataplaneProxy {
	if o == nil {
		return nil
	}
	return o.DataplaneProxy
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesConf - Configuration of the backend
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesConf struct {
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends - LoggingBackend defines logging backend available to mesh. Backends can be used in TrafficLog rules.
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends struct {
	// Configuration of the backend
	Conf *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesConf `json:"conf,omitempty"`
	// Format of access logs. Placeholders available on https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log
	Format *string `json:"format,omitempty"`
	// Name of the backend, can be then used in Mesh.logging.defaultBackend or in TrafficLogging
	Name *string `json:"name,omitempty"`
	// Type of the backend (Kuma ships with 'tcp' and 'file')
	Type *string `json:"type,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends) GetConf() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesConf {
	if o == nil {
		return nil
	}
	return o.Conf
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging - Logging settings. +optional
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging struct {
	// List of available logging backends
	Backends []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends `json:"backends,omitempty"`
	// Name of the default backend
	DefaultBackend *string `json:"defaultBackend,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging) GetBackends() []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMeshesBackends {
	if o == nil {
		return nil
	}
	return o.Backends
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging) GetDefaultBackend() *string {
	if o == nil {
		return nil
	}
	return o.DefaultBackend
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConf - Configuration of the backend
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConf struct {
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRotation - Rotation settings
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRotation struct {
	// Time after which generated certificate for Dataplane will expire
	Expiration *string `json:"expiration,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRotation) GetExpiration() *string {
	if o == nil {
		return nil
	}
	return o.Expiration
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert - Dataplane certificate settings
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert struct {
	// Timeout on request to CA for DP certificate generation and retrieval
	RequestTimeout *string `json:"requestTimeout,omitempty"`
	// Rotation settings
	Rotation *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRotation `json:"rotation,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert) GetRequestTimeout() *string {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert) GetRotation() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRotation {
	if o == nil {
		return nil
	}
	return o.Rotation
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode - Mode defines the behaviour of inbound listeners with regard to traffic encryption
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode string

const (
	GetV1MeshControlPlanesCpIDAPIMeshesMeshNameModeStrict     GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode = "STRICT"
	GetV1MeshControlPlanesCpIDAPIMeshesMeshNameModePermissive GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode = "PERMISSIVE"
)

func (e GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode) ToPointer() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode {
	return &e
}
func (e *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STRICT":
		fallthrough
	case "PERMISSIVE":
		*e = GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode: %v", v)
	}
}

type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRootChain struct {
	// Timeout on request for to CA for root certificate chain. If not specified, defaults to 10s.
	RequestTimeout *string `json:"requestTimeout,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRootChain) GetRequestTimeout() *string {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends - CertificateAuthorityBackend defines Certificate Authority backend
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends struct {
	// Configuration of the backend
	Conf *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConf `json:"conf,omitempty"`
	// Dataplane certificate settings
	DpCert *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert `json:"dpCert,omitempty"`
	// Mode defines the behaviour of inbound listeners with regard to traffic encryption
	Mode *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode `json:"mode,omitempty"`
	// Name of the backend
	Name      *string                                               `json:"name,omitempty"`
	RootChain *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRootChain `json:"rootChain,omitempty"`
	// Type of the backend. Has to be one of the loaded plugins (Kuma ships with builtin and provided)
	Type *string `json:"type,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetConf() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConf {
	if o == nil {
		return nil
	}
	return o.Conf
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetDpCert() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameDpCert {
	if o == nil {
		return nil
	}
	return o.DpCert
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetMode() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetRootChain() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameRootChain {
	if o == nil {
		return nil
	}
	return o.RootChain
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls - mTLS settings. +optional
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls struct {
	// List of available Certificate Authority backends
	Backends []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends `json:"backends,omitempty"`
	// Name of the enabled backend
	EnabledBackend *string `json:"enabledBackend,omitempty"`
	// If enabled, skips CA validation.
	SkipValidation *bool `json:"skipValidation,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls) GetBackends() []GetV1MeshControlPlanesCpIDAPIMeshesMeshNameBackends {
	if o == nil {
		return nil
	}
	return o.Backends
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls) GetEnabledBackend() *string {
	if o == nil {
		return nil
	}
	return o.EnabledBackend
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls) GetSkipValidation() *bool {
	if o == nil {
		return nil
	}
	return o.SkipValidation
}

// GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody - OK
type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody struct {
	// Constraints that applies to the mesh and its entities
	Constraints *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConstraints `json:"constraints,omitempty"`
	// Logging settings. +optional
	Logging *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging `json:"logging,omitempty"`
	// mTLS settings. +optional
	Mtls *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls `json:"mtls,omitempty"`
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody) GetConstraints() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody) GetLogging() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody) GetMtls() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameMtls {
	if o == nil {
		return nil
	}
	return o.Mtls
}

type GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponse) GetObject() *GetV1MeshControlPlanesCpIDAPIMeshesMeshNameResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
